import os
import sys

IDL_SOURCES=['led_control.idl']
SOURCES=['led_control.cc', 'plugin.cc']

AddOption(
	'--compat-memcpy',
	dest='compat-memcpy',
	action='store_true',
	help= "if building with glibc >= 2.14, the plugin will be incompatible "
	      "with glibc < 2.14, if you don't use this option. "
)

env = Environment(
	GLUE_DIR='glue',
	NIXYSA_DIR='/tmp/nixysa-read-only/nixysa',
	STATIC_GLUE_DIR='$NIXYSA_DIR/static_glue/npapi',
	NPAPI_DIR='$NIXYSA_DIR/../third_party/npapi/include',
	CPPDEFINES=['OS_LINUX'],
	CPPPATH=['.', '$STATIC_GLUE_DIR', '$NIXYSA_DIR/../third_party/npapi/include', '$GLUE_DIR']
)

env.Append(ENV={'PYTHON': sys.executable})
if GetOption('compat-memcpy'):
	env.Append(CCFLAGS=['-include', 'compat.h'])

def NixysaEmitter(target, source, env):
  bases = [os.path.splitext(s.name)[0] for s in source] + ['globals']
  targets = ['$GLUE_DIR/%s_glue.cc' % b for b in bases]
  targets += ['$GLUE_DIR/%s_glue.h' % b for b in bases]
  targets += ['$GLUE_DIR/hash', '$GLUE_DIR/parsetab.py']
  return targets, source

NIXYSA_CMDLINE = ' '.join([env.File('$NIXYSA_DIR/codegen.sh').abspath,
						   '--output-dir=$GLUE_DIR',
						   '--generate=npapi',
						   '$SOURCES'])

env['BUILDERS']['Nixysa'] = Builder(action=NIXYSA_CMDLINE,
									emitter=NixysaEmitter)

env.SharedLibrary('led-control',
	[f for f in env.Nixysa(IDL_SOURCES) if f.suffix == '.cc'] +
	map(env.File, SOURCES) +
	env.Dir('$STATIC_GLUE_DIR').glob('*.cc')
)
